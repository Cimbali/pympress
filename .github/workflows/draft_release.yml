name: 'Draft release: build binaries etc.'

on:
  # On new tags, build binaries and srpm, run a full brew test, and create a draft release automatically.
  create:
  # We often mess up the automatic build. Allow to correct manually (optionally with different build numbers)
  workflow_dispatch:
    inputs:
      build:
        description: 'build number'
        required: false
        default: 1
      tag:
        description: 'Release tag for which to build'
        required: true


jobs:
  macos:
    name: Install and run test on mac
    runs-on: macos-latest
    steps:
    - name: Install latest
      run: |
        brew install pympress --only-dependencies
        brew install pympress --build-from-source --HEAD

    - name: Test
      run: |
        brew test pympress


  srpm:
    name: Source RPM
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install setuptools wheel twine babel pysrpm rpmlint

    - name: Update translations
      env:
        poeditor_api_token: ${{ secrets.POEDITOR_API_TOKEN }}
      run: |
        ./scripts/poedit.sh download
        python3 setup.py compile_catalog

    - name: Build binaries
      env:
        BUILD_DIR: build/rpm
      run: |
        mkdir srpm
        build=${{ github.event.inputs.build }}
        pysrpm --dest-dir=srpm/ --source-only --release ${build:-1} .

    - name: Make tag name
      id: name
      run: |
        ref=${{ github.ref }}
        [ "${ref::10}" = 'refs/tags/' ] && tag=${ref:10} || tag=${{ github.event.inputs.tag }}
        echo ::set-output name=tag::$tag

    - name: Create GitHub Release and upload
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ steps.name.outputs.tag }}
        fail_on_unmatched_files: true
        files: srpm/*.src.rpm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_PERSONAL_ACCESS_TOKEN }}

    - name: Check built RPM with rpmlint
      run: rpmlint srpm/*.src.rpm



  windows-build:
    name: Windows Binaries
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    strategy:
      matrix:
        include:
          - { arch: x86_64, msystem: MINGW64 }
          - { arch: i686, msystem: MINGW32 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup msys and dependencies
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            git
            zip
            base-devel
            mingw-w64-${{ matrix.arch }}-jq
            mingw-w64-${{ matrix.arch }}-curl
            mingw-w64-${{ matrix.arch }}-gtk3
            mingw-w64-${{ matrix.arch }}-cairo
            mingw-w64-${{ matrix.arch }}-poppler
            mingw-w64-${{ matrix.arch }}-python3
            mingw-w64-${{ matrix.arch }}-python3-pip
            mingw-w64-${{ matrix.arch }}-python3-gobject
            mingw-w64-${{ matrix.arch }}-python3-cairo
            mingw-w64-${{ matrix.arch }}-python3-appdirs
            mingw-w64-${{ matrix.arch }}-python3-setuptools
            mingw-w64-${{ matrix.arch }}-python3-packaging
            mingw-w64-${{ matrix.arch }}-python3-cx_Freeze
            mingw-w64-${{ matrix.arch }}-python3-babel
            mingw-w64-${{ matrix.arch }}-python3-watchdog

      - name: Install python-only dependencies
        run: |
          python3 -m pip install --disable-pip-version-check --upgrade pip
          python3 -m pip install python-vlc

      - name: Update translations
        env:
          poeditor_api_token: ${{ secrets.POEDITOR_API_TOKEN }}
        run: |
          ./scripts/poedit.sh download
          python3 setup.py compile_catalog

      - name: Build binary
        run: python3 setup.py --freeze build_exe

      - name: Make file and tag names
        id: name
        run: |
          ref=${{ github.ref }}
          [ "${ref::10}" = 'refs/tags/' ] && tag=${ref:10} || tag=${{ github.event.inputs.tag }}

          echo ::set-output name=file::pympress-$tag-${{ matrix.arch }}
          echo ::set-output name=tag::$tag

      - name: Build installer
        run: python3 setup.py --freeze bdist_msi --target-name ${{ steps.name.outputs.file }}.msi --skip-build

      - name: Make portable install
        run: |
          cd build
          mv exe.* pympress
          cp ../pympress/share/defaults.conf pympress/pympress.conf
          zip -r ../dist/${{ steps.name.outputs.file }}.zip pympress/
          cd -

      - name: Install pympress
        shell: pwsh
        run: |
          $installer = gci -path dist\* -include *.msi -name
          Start-Process msiexec.exe -Wait -NoNewWindow -ArgumentList ('/i "dist\{0}" /qn /norestart /L* installer.log' -f $installer)

          echo "::group::Installer log"
          get-content installer.log
          echo "::endgroup::"

      - name: Run pympress
        shell: pwsh
        run: |
          # Check pympress install dir is appended to one of the $PATH variables
          $dir = (
            [System.Environment]::GetEnvironmentVariable("Path","Machine").split(";") +
            [System.Environment]::GetEnvironmentVariable("Path","User").split(";")
          ) | Select-String 'pympress'

          gci -path $dir -filter *exe

          Start-Process "$dir\pympress.exe" -Wait -NoNewWindow -ArgumentList "--quit"

          echo "::group::Pympress log"
          get-content "$env:LOCALAPPDATA\pympress.log"
          echo "::endgroup::"

      - name: Create GitHub Release and upload
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ steps.name.outputs.tag }}
          fail_on_unmatched_files: true
          files: |
            dist/*.zip
            dist/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_PERSONAL_ACCESS_TOKEN }}
