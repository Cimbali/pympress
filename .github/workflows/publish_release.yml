name: 'Publish package: upload to pypi, brew, obs, and copr'

on:
  # When the draft release is converted to a public release, send out the binaries etc. to all the platforms
  release:
    types: [published]
  # Manual trigger
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag for which to build'
        required: true

jobs:
  pypi:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.name.outputs.tag }}
      release: ${{ steps.name.outputs.release }}
      url: ${{ steps.info.outputs.url }}
      sha256: ${{ steps.info.outputs.sha256 }}
      changes: ${{ steps.changes.outputs.changes }}

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -qy pandoc
        python -m pip install --break-system-packages --upgrade pip
        pip install --break-system-packages setuptools wheel twine babel

    - name: Define name
      id: name
      run: |
        ref=${{ github.ref }}
        [ "${ref::10}" = 'refs/tags/' ] && tag=${ref:10} || tag=${{ github.event.inputs.tag }}
        if echo ${tag#v} | grep -qxE '[0-9]+(\.[0-9]+)*' ; then release=final; else release=prerelease; fi
        printf '%s\n' "tag=${tag#v}" "release=$release" | tee -a $GITHUB_OUTPUT

    - name: Lookup what is in pypi currently
      id: prev
      run: |
        curl -sL "https://pypi.org/pypi/pympress/json" |
          jq '.releases | to_entries | map(.key as $version | .value | map(select(.packagetype == "sdist")) | first | .version = $version) | sort_by(.upload_time) | last' \
          > last.json

        jq -r '"version=\(.version)","url=\(.url)","sha256=\(.digests.sha256)"' last.json | tee -a $GITHUB_OUTPUT

    - name: Extract changes from release
      id: changes
      shell:
        bash
      env:
        tag: ${{ steps.name.outputs.tag }}
        GITHUB_TOKEN: ${{ secrets.PYMPRESS_ACTION_PAT }}
      run: |
        curl -s -u "Cimbali:$GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/Cimbali/pympress/releases" -o - |
          jq ".[] | select(.tag_name == \"v$tag\") | del(.author, .assets[].uploader)" | tee release.json

        echo 'changes<<EOF' | tee -a $GITHUB_OUTPUT
        jq -r .body release.json | sed '/\(New Contributors\|Full Changelog\)/,/^\s*$/d;s/^- /  &/;1i- Update to v${{ steps.name.outputs.tag }}' |
          pandoc --from=markdown --to=markdown --columns=67 | sed -r 's/^(\s+)-/\1*/;s/\#/#/g' | tee -a $GITHUB_OUTPUT
        echo 'EOF' | tee -a $GITHUB_OUTPUT

    - uses: actions/checkout@v4
      with:
        ref: v${{ steps.name.outputs.tag }}

    - name: Build catalogs and packages
      run: |
        python setup.py compile_catalog
        python setup.py sdist bdist_wheel

    - name: Upload
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      if: steps.prev.outputs.version != steps.name.outputs.tag
      run: |
        twine upload dist/*

    - name: Check info from pypi
      id: info
      env:
        tag: ${{ steps.name.outputs.tag }}
      run: |
        # Get releases from pypi, exiting with non-zero if expected version not found
        jq_script=".releases.\"${tag}\"[]? | select(.packagetype == \"sdist\")"
        while ! curl -s https://pypi.org/pypi/pympress/json | jq -r -e "$jq_script" > updated.json ; do
          sleep 60  # be patient with pypi
        done

        jq -r '"url=\(.url)","sha256=\(.digests.sha256)"' updated.json | tee -a $GITHUB_OUTPUT

    - name: Run a check on the generated file
      run: |
        if ! jq -r '"\(.digests.sha256) dist/\(.filename)"' updated.json | sha256sum -c ; then
          echo '::warning:: Generated sdist file did not match pypi sha256sum'
        fi


  aur:
    name: Publish to AUR
    needs: pypi
    runs-on: ubuntu-latest
    steps:
    - name: Clone repo
      run: git clone https://Cimbali@github.com/Cimbali/pympress-pkgbuild aur-repo

    - name: Get info
      id: info
      env:
        tag: ${{ needs.pypi.outputs.tag }}
      run: |
        version=`awk -F= '$1 == "pkgver" {print $2}' aur-repo/PKGBUILD | tr -d "[()\"']"`
        if [[ "$version" = "$tag" ]]; then
          release=`awk -F= '$1 == "pkgrel" {print $2}' aur-repo/PKGBUILD | tr -d "[()\"']"`
        else
          release=0
        fi

        printf '%s\n' "version=$version" "release=$release" | tee -a $GITHUB_OUTPUT

    - name: Update info
      run: |
        while read param value; do
          sed -i -r "s,^(\\s*$param ?=[('\" ]*)[A-Za-z0-9\${\}:/._-]+([ '\")]*)$,\1$value\2," aur-repo/.SRCINFO aur-repo/PKGBUILD
        done <<EOF
          source ${{ needs.pypi.outputs.url }}
          sha256sums ${{ needs.pypi.outputs.sha256 }}
          pkgver ${{ needs.pypi.outputs.tag }}
          pkgrel $(( ${{ steps.info.outputs.release }} + 1 ))
        EOF

        head -n999 aur-repo/.SRCINFO aur-repo/PKGBUILD

    - name: Push the changes
      if: steps.info.outputs.version != needs.pypi.outputs.tag
      run: |
        cd aur-repo
        git config user.name Cimbali
        git config user.email me@cimba.li
        echo -e "protocol=https\nhost=github.com\nusername=Cimbali\npassword=$PASSWORD" | git credential-store store

        git commit -am "Update to v${{ needs.pypi.outputs.tag }}"
        git push origin "main:main"

      env:
        PASSWORD: ${{ secrets.PYMPRESS_ACTION_PAT }}


  obs:
    name: Upload to OpenBuildService
    needs: pypi
    runs-on: ubuntu-latest
    container: opensuse/tumbleweed

    steps:
    - name: Install dependencies
      run: zypper install -y curl jq awk osc

    - name: Fetch info from OpenBuildService
      id: info
      run: |
        trap 'rm -f ./osc-config' EXIT && echo "$OPENBUILDSERVICE_TOKEN_SECRET" > ./osc-config
        osc="osc --config $GITHUB_WORKSPACE/osc-config"

        $osc co -o osc home:cimbali python-pympress
        version=`awk -F: '$1 == "Version" { print $2 }' osc/pympress.spec | tr -d ' '`

        echo version=$version | tee -a $GITHUB_OUTPUT

        if ! grep -qFe "- *Update to v${version//./\\.}" osc/pympress.changes; then
          echo '::warning:: Last version missing from changelog'
        fi
      env:
        OPENBUILDSERVICE_TOKEN_SECRET: ${{ secrets.OPENBUILDSERVICE_TOKEN_SECRET }}

    - name: Upload to OpenBuildService
      if: needs.pypi.outputs.tag != steps.info.outputs.version
      run: |
        trap 'rm -f ./osc-config' EXIT && echo "$OPENBUILDSERVICE_TOKEN_SECRET" > ./osc-config
        osc="osc --config $GITHUB_WORKSPACE/osc-config"
        cd osc

        $osc vc -m "$changes"
        sed -i "2s/Cimba Li <me@cimba.li>/me@cimba.li/" pympress.changes
        $osc ci -m "Release $tag"

        $osc sr --yes -m "Version $tag" 'X11:Utilities' pympress
      env:
        OPENBUILDSERVICE_TOKEN_SECRET: ${{ secrets.OPENBUILDSERVICE_TOKEN_SECRET }}
        tag: ${{ needs.pypi.outputs.tag }}
        changes: ${{ needs.pypi.outputs.changes }}


  copr:
    name: Upload to COPR
    needs: pypi
    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -qy cpio rpm2cpio python3-m2crypto
        python3 -m pip install --break-system-packages copr-cli

    - name: Fetch info from COPR
      id: info
      run: |
        trap 'rm -f ./copr-config' EXIT && echo "$COPR_TOKEN_CONFIG" > ./copr-config
        copr-cli --config ./copr-config get-package --name=python3-pympress --output-format=json cimbali/pympress |
          jq -r '"version=\(.latest_build.source_package.version | sub("-[0-9]*$"; ""))"' | tee -a $GITHUB_OUTPUT
      env:
        COPR_TOKEN_CONFIG: ${{ secrets.COPR_TOKEN_CONFIG }}

    - name: Get SRPM URL from GitHub Release and download
      env:
        tag: ${{ needs.pypi.outputs.tag }}
      run: |
        url="https://github.com/Cimbali/pympress/releases/download/v${tag}/python3-pympress-${tag}-1.src.rpm"
        curl -L "$url" -o "python3-pympress-${tag}-1.src.rpm"

    - name: Upload to COPR
      if: needs.pypi.outputs.tag != steps.info.outputs.version
      run: |
        trap 'rm -f ./copr-config' EXIT && echo "$COPR_TOKEN_CONFIG" > ./copr-config
        copr-cli --config ./copr-config build --nowait cimbali/pympress "python3-pympress-${tag}-1.src.rpm"
      env:
        tag: ${{ needs.pypi.outputs.tag }}
        COPR_TOKEN_CONFIG: ${{ secrets.COPR_TOKEN_CONFIG }}


  brew:
    name: Request Homebrew pull new version
    needs: pypi
    runs-on: macos-latest

    steps:
    - name: Install dependencies
      continue-on-error: true
      run: |
        brew update
        brew upgrade
        brew install pipgrip gnu-sed

    - name: Configure brew repo
      run: |
        cd "`brew --repo homebrew/core`"
        # Credentials and remotes
        git config user.name Cimbali
        git config user.email me@cimba.li
        git config credential.helper store
        echo -e "protocol=https\nhost=github.com\nusername=Cimbali\npassword=$PASSWORD" | git credential-store store
        git remote add gh "https://github.com/Cimbali/homebrew-core/"
        git fetch gh
        # Attempt a rebase of changes in our repo copy
        git checkout --detach
        git rebase origin/master gh/master && git branch -f master HEAD || git rebase --abort
        # Now use master and update remote so we can use the bump-formula-pr
        git checkout master
        git push gh -f master:master
      env:
        PASSWORD: ${{ secrets.PYMPRESS_ACTION_PAT }}

    - name: Get info from repo
      id: info
      run: |
        cd "`brew --repo homebrew/core`"

        version=`gsed -rn 's,^\s*url "[a-z]+://([a-z0-9_.-]+/)*pympress-(.*)\.tar\.gz"$,\2,p' Formula/p/pympress.rb`
        echo version=$version | tee -a $GITHUB_OUTPUT

        curl -sL -u "Cimbali:$GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json" -o - \
          'https://api.github.com/repos/Homebrew/homebrew-core/pulls?state=open&per_page=100' > pulls.json
          jq -r '.[] | [.number, .title] | join(",")'  > pulls.csv

        pr=`jq -r "map(select(.title == \"pympress $tag\")) | first.number? " pulls.json`
        echo pr=$pr | tee -a $GITHUB_OUTPUT

        if [ "$pr" != "null" ]; then
          echo "::warning:: Pull request already open at https://github.com/Homebrew/homebrew-core/pull/$pr"
        fi

      env:
        tag: ${{ needs.pypi.outputs.tag }}

    - name: Make a brew PR from pypi’s metadata
      if: needs.pypi.outputs.release == 'final' && ( steps.info.outputs.version != needs.pypi.outputs.tag ) && ! steps.info.outputs.pr
      run: |
        brew bump-formula-pr --strict --no-browse --url="${{needs.pypi.outputs.url}}" --sha256="${{needs.pypi.outputs.sha256}}" pympress
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.PYMPRESS_ACTION_PAT }}
        HUB_REMOTE: https://github.com/Cimbali/homebrew-core/
