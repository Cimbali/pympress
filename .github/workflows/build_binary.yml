name: Build binaries

on:
  create:
  workflow_dispatch:
    # We often mess up the automatic build. Allow to correct manually (optionally with different build numbers)
    inputs:
      build:
        description: 'build number'
        required: false
        default: 1
      tag:
        description: 'Release tag for which to build'
        required: true


jobs:
  srpm:
    name: Source RPM
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install setuptools wheel twine babel

    - name: Update translations
      env:
        poeditor_api_token: ${{ secrets.POEDITOR_API_TOKEN }}
      run: |
        ./scripts/poedit.sh download
        python3 setup.py compile_catalog

    - name: Build binaries
      env:
        BUILD_DIR: build/rpm
      run: |
        mkdir srpm
        build=${{ github.event.inputs.build }}
        python3 setup.py bdist_rpm --dist-dir=srpm/ --source-only --release ${build:-1}

    - name: Upload to GitHub Release
      run: |
        du -b dist/*

        function api() {
          curl -s -u "Cimbali:$GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$@"
        }

        ref=${{ github.ref }}
        [ "${ref::10}" = 'refs/tags/' ] && tag=${ref:10} || tag=${{ github.event.inputs.tag }}

        api -o release.json "https://api.github.com/repos/Cimbali/pympress/releases/tags/$tag"
        jq . release.json

        upload_url=`jq -r '.upload_url | gsub("{.*}$"; "")' release.json`

        file=`find srpm/ -name "*.src.rpm"`
        if ! jq -r '.assets[]?.name?' release.json | grep -qxF "${file#srpm/}"; then
          size=`stat -c %s "$file"`
          echo "Uploading $file with $size bytes"
          api -X POST -H "Content-Type: application/x-rpm" -H "Content-Length: $size" -d "@$file" "$upload_url?name=${file#srpm/}" | jq .
        else
          echo "Skipping $file"
        fi

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_PERSONAL_ACCESS_TOKEN }}

    - name: Upload to COPR
      continue-on-error: true
      run: |
        trap 'rm -f ./copr-config' EXIT && echo "$COPR_TOKEN_CONFIG" > ./copr-config

        python3 -m pip install copr-cli
        copr-cli --config ./copr-config build --nowait cimbali/pympress srpm/python3-pympress-*.src.rpm

      env:
        COPR_TOKEN_CONFIG: ${{ secrets.COPR_TOKEN_CONFIG }}


  windows-build:
    name: Windows Binaries
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    strategy:
      matrix:
        include:
          - { arch: x86_64, msystem: MINGW64 }
          - { arch: i686, msystem: MINGW32 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup msys and dependencies
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            git
            zip
            base-devel
            mingw-w64-${{ matrix.arch }}-jq
            mingw-w64-${{ matrix.arch }}-curl
            mingw-w64-${{ matrix.arch }}-gtk3
            mingw-w64-${{ matrix.arch }}-cairo
            mingw-w64-${{ matrix.arch }}-poppler
            mingw-w64-${{ matrix.arch }}-python3
            mingw-w64-${{ matrix.arch }}-python3-pip
            mingw-w64-${{ matrix.arch }}-python3-gobject
            mingw-w64-${{ matrix.arch }}-python3-cairo
            mingw-w64-${{ matrix.arch }}-python3-appdirs
            mingw-w64-${{ matrix.arch }}-python3-setuptools
            mingw-w64-${{ matrix.arch }}-python3-packaging
            mingw-w64-${{ matrix.arch }}-python3-cx_Freeze
            mingw-w64-${{ matrix.arch }}-python3-babel
            mingw-w64-${{ matrix.arch }}-python3-watchdog

      - name: Install python-only dependencies
        run: |
          python3 -m pip install --disable-pip-version-check --upgrade pip
          python3 -m pip install python-vlc

      - name: Update translations
        env:
          poeditor_api_token: ${{ secrets.POEDITOR_API_TOKEN }}
        run: |
          ./scripts/poedit.sh download
          python3 setup.py compile_catalog

      - name: Build binary
        run: python3 setup.py --freeze build_exe

      - name: Make file name
        id: file
        run: |
          ref=${{ github.ref }}
          [ "${ref::10}" = 'refs/tags/' ] && tag=${ref:10} || tag=${{ github.event.inputs.tag }}

          echo ::set-output name=name::pympress-$tag-${{ matrix.arch }}

      - name: Build installer
        run: python3 setup.py --freeze bdist_msi --target-name ${{ steps.file.outputs.name }}.msi --skip-build

      - name: Make portable install
        run: |
          cd build
          mv exe.* pympress
          cp ../pympress/share/defaults.conf pympress/pympress.conf
          zip -r ../dist/${{ steps.file.outputs.name }}.zip pympress/
          cd -

      - name: Install pympress
        shell: pwsh
        run: |
          $installer = gci -path dist\* -include *.msi -name
          Start-Process msiexec.exe -Wait -NoNewWindow -ArgumentList ('/i "dist\{0}" /qn /norestart /L* installer.log' -f $installer)

          echo "::group::Installer log"
          get-content installer.log
          echo "::endgroup::"

      - name: Run pympress
        shell: pwsh
        run: |
          # Check pympress install dir is appended to one of the $PATH variables
          $dir = (
            [System.Environment]::GetEnvironmentVariable("Path","Machine").split(";") +
            [System.Environment]::GetEnvironmentVariable("Path","User").split(";")
          ) | Select-String 'pympress'

          gci -path $dir -filter *exe

          Start-Process "$dir\pympress.exe" -Wait -NoNewWindow -ArgumentList "--quit"

          echo "::group::Pympress log"
          get-content "$env:LOCALAPPDATA\pympress.log"
          echo "::endgroup::"

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          path: |
            dist/*.zip
            dist/*.msi

      - name: Upload to GitHub Release
        run: |
          du -b dist/*

          function api() {
            curl -s -u "Cimbali:$GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$@"
          }

          declare -A contents=(
            ["msi"]=application/x-msdownload
            ["zip"]=application/zip
          )

          ref=${{ github.ref }}
          [ "${ref::10}" = 'refs/tags/' ] && tag=${ref:10} || tag=${{ github.event.inputs.tag }}

          api -o release.json https://api.github.com/repos/Cimbali/pympress/releases/tags/${tag}
          jq . release.json

          upload_url=`jq -r '.upload_url | gsub("{.*}$"; "")' release.json`

          jq -r '.assets[]?.name?' release.json > skip

          for file in dist/*; do
            if ! grep -qxF "${file#dist/}" skip; then
              size=`stat -c %s "$file"`
              echo "Uploading $file with $size bytes"
              api -X POST -H "Content-Type: ${contents[${file##*.}]}" -H "Content-Length: $size" -d "@$file" "$upload_url?name=${file#dist/}" | jq .
            else
              echo "Skipping $file"
            fi
          done

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_PERSONAL_ACCESS_TOKEN }}
